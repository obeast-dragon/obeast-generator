package ${package}.${moduleName}.controller;

import java.util.List;
import java.util.Map;

import ${package}.common.api.R;
import ${package}.common.constant.PageConstant;
import ${package}.common.domain.PageObjects;
import com.worldintek.common.utils.EasyExcelUtils;
import com.worldintek.common.utils.ClassConvertUtils;
import com.worldintek.common.validation.group.AddGroup;
import com.worldintek.common.validation.group.DefaultGroup;
import com.worldintek.common.validation.group.UpdateGroup;
import com.worldintek.common.validation.group.DeleteGroup;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.*;

import ${package}.${moduleName}.Entity.${className}Entity;
import ${package}.${moduleName}.Excel.${className}Excel;
import ${package}.${moduleName}.service.${className}Service;

import javax.servlet.http.HttpServletResponse;



/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@RestController
@RequestMapping("${moduleName}/${pathName}")
@Tag(name = "${comments}接口")
public class ${className}Controller {

    @Autowired
    private ${className}Service ${classname}Service;

    /**
     * 分页列表
     */
    @GetMapping("/listPage")
    @Operation(summary = "分页查询")
    @Parameters({
            @Parameter(name = PageConstant.CUR, description = "当前页码，从1开始", in = ParameterIn.QUERY, required = true, schema = @Schema(implementation = Integer.class)),
            @Parameter(name = PageConstant.LIMIT, description = "每页显示记录数", in = ParameterIn.QUERY, required = true, schema = @Schema(implementation = Integer.class)),
            @Parameter(name = PageConstant.ORDER_FIELD, description = "排序字段", in = ParameterIn.QUERY, schema = @Schema(implementation = String.class)),
            @Parameter(name = PageConstant.ORDER, description = "排序方式，可选值(asc、desc)", in = ParameterIn.QUERY, required = true, schema = @Schema(implementation = String.class))
    })
    public R<PageObjects<${className}Entity>> list(@RequestParam("params") Map<String, Object> params) {
        if (params == null) {
            return R.error("params is null please input args");
        }
        PageObjects<${className}Entity> page = ${classname}Service.queryPage(params);
        return R.success(page, "page");
    }


    /**
     * 根据id查询
     */
    @GetMapping("/info/{${pk.attrname}}")
    @Operation(summary = "根据id查询")
    @Parameter(name = "id", description = "${className}的${pk.attrname}", in = ParameterIn.PATH, required = true, schema = @Schema(implementation = Long.class))
    public R<${className}Entity> info(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}){
		${className}Entity ${classname} = ${classname}Service.getById(${pk.attrname});

        return R.success(${classname}, "${classname}");
    }

    /**
     * 保存
     */
    @PostMapping("/save")
    @Operation(summary = "保存")
    @Parameter(name = "${classname}", description = "${classname}实体", required = true)
    public R save(@Validated({AddGroup.class, DefaultGroup.class}) @RequestBody ${className}Entity entity){

        ${classname}Service.save(entity);

        return R.success();
    }

    /**
     * 修改
     */
    @PostMapping("/update")
    @Operation(summary = "修改")
    @Parameter(name = "operatorEntity", description = "${classname}实体", required = true)
    public R update(@Validated({UpdateGroup.class, DefaultGroup.class}) @RequestBody ${className}Entity entity){
        ${classname}Service.updateById(entity);
        return R.success();
    }

    /**
     * 删除
     */
    @DeleteMapping("/delete")
    @Operation(summary = "删除")
    @Parameter(name = "${pk.attrname}s", in = ParameterIn.QUERY, description = "${pk.attrname}数组", required = true)
    public R delete(@Validated({DeleteGroup.class, DefaultGroup.class}) @RequestParam("${pk.attrname}s") List<${pk.attrType}> ${pk.attrname}s){
        ${classname}Service.removeByIds(${pk.attrname}s);
        return R.success();
    }

    @Operation(summary = "导出Excel")
    @Parameters({
            @Parameter(name = "fileName", in = ParameterIn.QUERY, description = "文件名"),
            @Parameter(name = "sheetName", in = ParameterIn.QUERY, description = "工作表名"),
    })
    @GetMapping("/export")
    public void exportTestReport(HttpServletResponse response,
                                 @RequestParam("params") Map<String, Object> params) {
        String fileName = (String) params.get("fileName");
        String sheetName = (String) params.get("sheetName");
        if (!StringUtils.hasText(fileName)) {
            R.error("请输入 fileName 参数");
        }
        List<${className}Entity> temp = ${classname}Service.listByCondition(params);
        List<${className}Excel> excels = ClassConvertUtils.sourceToTarget(temp, ${className}Excel.class);
        EasyExcelUtils<${className}Excel> easyExcel = new EasyExcelUtils<>(${className}Excel.class);
        easyExcel.exportExcel(response, excels, sheetName, fileName);
    }


}
